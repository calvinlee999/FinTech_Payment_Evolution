version: '3.8'

services:
  # Kafka and Zookeeper for local development
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: batch-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - batch-inference-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: batch-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - batch-inference-network

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: batch-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    networks:
      - batch-inference-network

  # MLflow for model registry
  mlflow:
    image: python:3.9-slim
    container_name: batch-mlflow
    ports:
      - "5000:5000"
    environment:
      - MLFLOW_BACKEND_STORE_URI=sqlite:///mlflow/mlflow.db
      - MLFLOW_DEFAULT_ARTIFACT_ROOT=/mlflow/artifacts
    volumes:
      - mlflow-data:/mlflow
    command: >
      sh -c "pip install mlflow psycopg2-binary boto3 azure-storage-blob &&
             mlflow server --host 0.0.0.0 --port 5000 
             --backend-store-uri sqlite:///mlflow/mlflow.db 
             --default-artifact-root /mlflow/artifacts"
    networks:
      - batch-inference-network

  # Spark Master
  spark-master:
    image: bitnami/spark:3.5.0
    container_name: batch-spark-master
    ports:
      - "8080:8080"
      - "7077:7077"
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_USER=spark
    volumes:
      - spark-data:/opt/bitnami/spark/data
    networks:
      - batch-inference-network

  # Spark Worker
  spark-worker:
    image: bitnami/spark:3.5.0
    container_name: batch-spark-worker
    depends_on:
      - spark-master
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2G
      - SPARK_WORKER_CORES=2
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_USER=spark
    volumes:
      - spark-data:/opt/bitnami/spark/data
    networks:
      - batch-inference-network

  # MinIO for S3-compatible storage (local development)
  minio:
    image: minio/minio:latest
    container_name: batch-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
    networks:
      - batch-inference-network

  # Batch Inference Service
  batch-inference-service:
    build: .
    container_name: batch-inference-service
    ports:
      - "8085:8085"
    depends_on:
      - kafka
      - redis
      - mlflow
      - spark-master
    environment:
      - SPRING_PROFILES_ACTIVE=local
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - SPARK_MASTER_URL=spark://spark-master:7077
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - AZURE_STORAGE_ACCOUNT_NAME=devstorageaccount1
      - AZURE_STORAGE_ACCOUNT_KEY=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    networks:
      - batch-inference-network
    restart: unless-stopped

  # Kafka UI for monitoring
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: batch-kafka-ui
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - batch-inference-network

volumes:
  kafka-data:
    driver: local
  redis-data:
    driver: local
  mlflow-data:
    driver: local
  spark-data:
    driver: local
  minio-data:
    driver: local

networks:
  batch-inference-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16