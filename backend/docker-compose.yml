version: '3.8'

services:
  # Infrastructure Services
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - microservices-network

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CREATE_TOPICS: "user-events:1:1,ai-events:1:1,notification-events:1:1,analytics-events:1:1,user.journey.events:3:1,credit.events:3:1,contract.events:3:1,payment.events:3:1"
    networks:
      - microservices-network

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - microservices-network

  consul:
    image: consul:latest
    ports:
      - "8500:8500"
    command: consul agent -dev -client=0.0.0.0 -ui
    networks:
      - microservices-network

  # Database Services
  postgres-users:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: users
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_users_data:/var/lib/postgresql/data
    networks:
      - microservices-network

  postgres-analytics:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: analytics
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5433:5432"
    volumes:
      - postgres_analytics_data:/var/lib/postgresql/data
    networks:
      - microservices-network

  # Microservices
  api-gateway:
    build: ./microservices/api-gateway
    ports:
      - "8080:8080"
    environment:
      - CONSUL_HOST=consul
      - KAFKA_BROKER=kafka:9092
      - REDIS_HOST=redis
    depends_on:
      - consul
      - kafka
      - redis
    networks:
      - microservices-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api-gateway.rule=Host(`api.fintech-local.com`)"
      - "traefik.http.services.api-gateway.loadbalancer.server.port=8080"

  user-service:
    build: ./microservices/user-service
    ports:
      - "8081:8080"
    environment:
      - CONSUL_HOST=consul
      - KAFKA_BROKER=kafka:9092
      - DATABASE_URL=jdbc:postgresql://postgres-users:5432/users
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=postgres
    depends_on:
      - consul
      - kafka
      - postgres-users
    networks:
      - microservices-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.user-service.rule=Host(`users.fintech-local.com`)"
      - "traefik.http.services.user-service.loadbalancer.server.port=8080"

  journey-orchestrator:
    build: ./microservices/journey-orchestrator
    ports:
      - "8084:8084"
    environment:
      - CONSUL_HOST=consul
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SERVER_PORT=8084
      - ENVIRONMENT=docker
    depends_on:
      - consul
      - kafka
    networks:
      - microservices-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.journey-orchestrator.rule=Host(`journey.fintech-local.com`)"
      - "traefik.http.services.journey-orchestrator.loadbalancer.server.port=8084"

  ai-inference-service:
    build: ./microservices/ai-inference-service
    ports:
      - "8082:8080"
    environment:
      - CONSUL_HOST=consul
      - KAFKA_BROKER=kafka:9092
      - AZURE_OPENAI_ENDPOINT=${AZURE_OPENAI_ENDPOINT}
      - AZURE_OPENAI_API_KEY=${AZURE_OPENAI_API_KEY}
      - AZURE_OPENAI_DEPLOYMENT_NAME=${AZURE_OPENAI_DEPLOYMENT_NAME}
    depends_on:
      - consul
      - kafka
    networks:
      - microservices-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ai-service.rule=Host(`ai.fintech-local.com`)"
      - "traefik.http.services.ai-service.loadbalancer.server.port=8080"

  notification-service:
    build: ./microservices/notification-service
    ports:
      - "8083:8080"
    environment:
      - CONSUL_HOST=consul
      - KAFKA_BROKER=kafka:9092
      - REDIS_HOST=redis
    depends_on:
      - consul
      - kafka
      - redis
    networks:
      - microservices-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.notification-service.rule=Host(`notifications.fintech-local.com`)"
      - "traefik.http.services.notification-service.loadbalancer.server.port=8080"

  analytics-service:
    build: ./microservices/analytics-service
    ports:
      - "8085:8080"
    environment:
      - CONSUL_HOST=consul
      - KAFKA_BROKER=kafka:9092
      - DATABASE_URL=jdbc:postgresql://postgres-analytics:5432/analytics
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=postgres
    depends_on:
      - consul
      - kafka
      - postgres-analytics
    networks:
      - microservices-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.analytics-service.rule=Host(`analytics.fintech-local.com`)"
      - "traefik.http.services.analytics-service.loadbalancer.server.port=8080"

  # Load Balancer & Reverse Proxy
  traefik:
    image: traefik:v3.0
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
    ports:
      - "80:80"
      - "443:443"
      - "8090:8080"  # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - microservices-network

  # Observability Stack
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - microservices-network

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - microservices-network

  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - microservices-network

volumes:
  postgres_users_data:
  postgres_analytics_data:
  grafana_data:

networks:
  microservices-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16